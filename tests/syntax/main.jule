type TestTypeAlias: i32

// Test for global variable.
let TEST_GLOBAL = 10;
// Test for global constant variable.
const TEST_CONST = 20

fn test_string_concat() {
	_ = "Hello" + " " + "World!"
}

fn test_intergers() {
	_ = 13e+1
	_ = 3536
	_ = 0x0FDDA24
	_ = 05353
}

fn test_variable() {
	let a: int = 0
	_ = a
	let mut x = 10;
	x = 100
	outln(x);
}

fn test_assignment() {
	let mut x = 10
	x += 100;
}

fn test_slice() {
	let my_slice = [
		["Apple", "Banana"],
		["Bred", "Cheese"],
	];
	outln(
		my_slice[0]
	)
}

fn test_array() {
	let my_array: [2][3]str = [
		["Apple", "Banana", "TEST"],
		["Bred", "Cheese", "BLA"],
	];
	outln(
		my_array[0]
	)
}

fn test_anonymous_function() {
	let my_func: fn() = fn() {
		outln("Hello World!")
	}
	my_func()
	let rf = fn(): i32 {
		ret 90
	}()
	_ = rf
	fn() {
		outln("Anonymous Outln")
	}()
	let a = 0
	_ = a
}

fn test_multiple_variable() {
	let (mut a, mut b, _, c) = 100, 200, nil, false
	_ = c
	a, b = 10, 20
	a, b = b, a
	outln(a)
	outln(b)
	a, b, _ = test_multiple_return()
}

fn test_multiple_return(): (i32, i32, bool) { ret 5, 5, false }

fn test_iter() {
	// Infinity iteration
	for {
		break
		continue
	}

	// While iteration
	for !false {
		break
	}

	// Foreach iteration
	for in "Hello" {
		outln("Jule")
	}

	for index in "Hello" {
		outln(index)
	}

	for _, c in "Hello" {
		outln(c)
	}

	for _, element in ["The", "Jule", "Programming", "Language"] {
		outln(element)
	}

	for index in "TEST" {
		_ = index
	}

	for ; { break }

	let mut a = 0
	for a <= 3; a++ {
		outln(a)
	}
}

fn test_if_expressions() {
	if true {
		outln("IF")
	} else if true { outln("ELSE_IF0") } else if false {
		outln("ELSE_IF_1")
		if true == true {
			outln("ELSE_IF_1_IF");
		} else {
			outln("ELSE");
		}
	} else {
		outln("ELSE")
	}
}

fn test_parameters(a: i32, b: bool) {}

fn test_parameters_2(a: i32, b: i32, c: bool, d: bool) {}

fn test_variadic_parameters(ln_every: bool, values: ...i32) {
	for _, i in values {
		if ln_every { outln(i)
		} else      { out(i) }
	}
}

fn test_variadic_parameters_2(...str) {}

fn test_casting() {
	let a: *int = nil
	_ = (uintptr)(a)
	_ = (f32)(5000)
	let bytes = ([]byte)("Hello Bytes")
	outln(bytes)
	outln((str)(bytes))
}

fn test_raw_string() {
	_ = `Hello
	raw`

	_ = `
  strings`
}

fn test_map() {
	let mut map: [int:str] = {
		0: "The",
		1: "Jule",
		2: "Programming",
		3: "Language"
	}
	map[4] = "Maps"
	outln(map)
	for key, value in map {
		out(key)
		out(": ")
		outln(value)
	}
}

fn test_multiple_return_as_multiple_return() {
	let test1 = fn(): (i32, str, byte) { ret 143, "STR", 'W' }
	let test2 = fn(): (i32, str, byte) { ret test1() }
	let (a, b, c) = test2()
	outln(a)
	outln(b)
	outln(c)
}

fn test_inblock_type_alias() {
	type integer: i32
	let x: integer = 10
	_ = x
}

fn test_inblock_block() {
	{
		outln("INBLOCK_BLOCK")
	}
}

fn test_goto() {
	let s = "Hello World"
	{
		let mut ok = false
		{
			if !ok {
				ok = true
				goto bla
			}
			goto test
		}
	bla:
		outln(ok)
	}
test:
	{
		outln("TEST")
		goto end
	}
	outln(s)
end:
}

enum test_enum {
	item1,
	item2,
	item3 = 369,
	item4,
}

struct test_struct {
	a: str
	b: i32
	c: byte
	d: bool
}

impl test_struct {
	fn func1(mut self) {
		self.a = "test"
	}

	fn func2[T1](mut self) {
		self.d = !self.d
	}
}

fn test_generic_func[T](a: T, b: T): T { ret a+b }

fn test_ret_vars(): (x: int) { ret }

fn test_postfix() {
	let mut a = 10
	a++
	a--
}

fn test_match_case() {
	match 10 {
	| 1: outln("one")
	| 2: outln("two")
	|:   outln("default")
	}

	match {
	| false:        outln("false")
	| !true:        outln("!true")
	| false | true: outln("false, true")
	|:              outln("default")
	}
}

fn init() {
	outln("Syntax Test")
}

// Entry point function of program.
fn main() {
	test_intergers()
	test_string_concat();
	test_variable();
	test_assignment()
	test_slice()
	test_array()
	test_anonymous_function()
	test_multiple_variable();
	test_iter()
	test_if_expressions();
	test_parameters(24, false)
	test_parameters_2(24, 52, true, false)
	test_variadic_parameters(true);
	test_variadic_parameters(true, 10, 20);
	test_variadic_parameters(!false, [i32(1), 2, 3, 4, 5]...)
	test_variadic_parameters_2()
	test_variadic_parameters_2("TEST", "TEST_1")
	test_casting()
	test_raw_string()
	test_map()
	test_multiple_return_as_multiple_return()
	test_inblock_type_alias()
	test_inblock_block()
	test_goto()
	outln(test_enum.item3)
	test_generic_func[int](2, -30)
	test_generic_func[uint](6, 2)
	test_generic_func[f64](4.2, 35.23)
	test_match_case()
}

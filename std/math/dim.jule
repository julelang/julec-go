// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/dim.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Returns the maximum of x-y or 0.
//
// Special cases are:
//  dim(+inf, +inf) = nan
//  dim(-inf, -inf) = nan
//  dim(x, nan) = dim(nan, x) = nan
pub fn dim(x: f64, y: f64): f64 {
	// The special cases result in nan after the subtraction:
	//      +inf - +inf  = nan
	//      -inf - -inf = nan
	//       nan - y    = nan
	//         x - nan  = nan
	let v = x - y
	if v <= 0 {
		// v is negative or 0
		ret 0
	}
	// v is positive or nan
	ret v
}

// Returns the larger of x or y.
//
// Special cases are:
//  max(x, +inf) = max(+inf, x) = +inf
//  max(x, nan)  = max(nan, x) = nan
//  max(+0, ±0)  = max(±0, +0) = +0
//  max(-0, -0)  = -0
pub fn max(x: f64, y: f64): f64 {
	// special cases
	match {
	| is_inf(x, 1) | is_inf(y, 1):
		ret inf(1)
	| is_nan(x) | is_nan(y):
		ret nan()
	| x == 0 && x == y:
		if signbit(x) {
			ret y
		}
		ret x
	}

	if x > y {
		ret x
	}
	ret y
}

// Returns the smaller of x or y.
//
// Special cases are:
//  min(x, -inf) = min(-inf, x) = -inf
//  min(x, nan)  = min(nan, x) = nan
//  min(-0, ±0)  = min(±0, -0) = -0
pub fn min(x: f64, y: f64): f64 {
	// special cases
	match {
	| is_inf(x, -1) | is_inf(y, -1):
		ret inf(-1)
	| is_nan(x) | is_nan(y):
		ret nan()
	| x == 0 && x == y:
		if signbit(x) {
			ret x
		}
		ret y
	}

	if x < y {
		ret x
	}
	ret y
}

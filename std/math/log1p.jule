// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/log1p.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// The original C code, the long comment, and the constants
// below are from FreeBSD's /usr/src/lib/msun/src/s_log1p.c
// and came with this notice. The Jule code is a simplified
// version of the original C.
//
// ====================================================
// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
//
// Developed at SunPro, a Sun Microsystems, Inc. business.
// Permission to use, copy, modify, and distribute this
// software is freely granted, provided that this notice
// is preserved.
// ====================================================
//
//
// double log1p(double x)
//
// Method :
//   1. Argument Reduction: find k and f such that
//                      1+x = 2**k * (1+f),
//         where  sqrt(2)/2 < 1+f < sqrt(2) .
//
//      Note. If k=0, then f=x is exact. However, if k!=0, then f
//      may not be representable exactly. In that case, a correction
//      term is need. Let u=1+x rounded. Let c = (1+x)-u, then
//      log(1+x) - log(u) ~ c/u. Thus, we proceed to compute log(u),
//      and add back the correction term c/u.
//      (Note: when x > 2**53, one can simply return log(x))
//
//   2. Approximation of log1p(f).
//      Let s = f/(2+f) ; based on log(1+f) = log(1+s) - log(1-s)
//               = 2s + 2/3 s**3 + 2/5 s**5 + .....,
//               = 2s + s*R
//      We use a special Reme algorithm on [0,0.1716] to generate
//      a polynomial of degree 14 to approximate R The maximum error
//      of this polynomial approximation is bounded by 2**-58.45. In
//      other words,
//                      2      4      6      8      10      12      14
//          R(z) ~ Lp1*s +Lp2*s +Lp3*s +Lp4*s +Lp5*s  +Lp6*s  +Lp7*s
//      (the values of Lp1 to Lp7 are listed in the program)
//      and
//          |      2          14          |     -58.45
//          | Lp1*s +...+Lp7*s    -  R(z) | <= 2
//          |                             |
//      Note that 2s = f - s*f = f - hfsq + s*hfsq, where hfsq = f*f/2.
//      In order to guarantee error in log below 1ulp, we compute log
//      by
//              log1p(f) = f - (hfsq - s*(hfsq+R)).
//
//   3. Finally, log1p(x) = k*ln2 + log1p(f).
//                        = k*ln2_hi+(f-(hfsq-(s*(hfsq+R)+k*ln2_lo)))
//      Here ln2 is split into two floating point number:
//                   ln2_hi + ln2_lo,
//      where n*ln2_hi is always exact for |n| < 2000.
//
// Special cases:
//      log1p(x) is NaN with signal if x < -1 (including -INF) ;
//      log1p(+INF) is +INF; log1p(-1) is -INF with signal;
//      log1p(NaN) is that NaN with no signal.
//
// Accuracy:
//      according to an error analysis, the error is always less than
//      1 ulp (unit in the last place).
//
// Constants:
// The hexadecimal values are the intended ones for the following
// constants. The decimal values may be used, provided that the
// compiler will convert from decimal to binary accurately enough
// to produce the hexadecimal values shown.
//
// Note: Assuming log() return accurate answer, the following
//       algorithm can be used to compute log1p(x) to within a few ULP:
//
//              u = 1+x;
//              if(u==1.0) return x ; else
//                         return log(u)*(x/(u-1.0));
//
//       See HP-15C Advanced Functions Handbook, p.193.

// Returns the natural logarithm of 1 plus its argument x.
// It is more accurate than log(1 + x) when x is near zero.
//
// Special cases are:
//  log1p(+inf) = +inf
//  log1p(±0) = ±0
//  log1p(-1) = -inf
//  log1p(x < -1) = nan
//  log1p(nan) = nan
pub fn log1p(x: f64): f64 {
	const SQRT2_M1      = 4.142135623730950488017e-01  // sqrt(2)-1 = 0x3fda827999fcef34
	const SQRT2_HALF_M1 = -2.928932188134524755992e-01 // sqrt(2)/2-1 = 0xbfd2bec333018866
	const SMALL         = 1.0 / (1 << 29)              // 2**-29 = 0x3e20000000000000
	const TINY          = 1.0 / (1 << 54)              // 2**-54
	const TWO53         = 1 << 53                      // 2**53
	const LN2_HI        = 6.93147180369123816490e-01   // 3fe62e42fee00000
	const LN2_LO        = 1.90821492927058770002e-10   // 3dea39ef35793c76
	const LP1           = 6.666666666666735130e-01     // 3FE5555555555593
	const LP2           = 3.999999999940941908e-01     // 3FD999999997FA04
	const LP3           = 2.857142874366239149e-01     // 3FD2492494229359
	const LP4           = 2.222219843214978396e-01     // 3FCC71C51D8E78AF
	const LP5           = 1.818357216161805012e-01     // 3FC7466496CB03DE
	const LP6           = 1.531383769920937332e-01     // 3FC39A09D078C69F
	const LP7           = 1.479819860511658591e-01     // 3FC2F112DF3E5244

	// special cases
	match {
	| x < -1 | is_nan(x): // includes -inf
		ret nan()
	| x == -1:
		ret inf(-1)
	| is_inf(x, 1):
		ret inf(1)
	}

	let absx = abs(x)

	let mut f: f64 = 0
	let mut iu: u64 = 0
	let mut k = 1
	if absx < SQRT2_M1 { //  |x| < sqrt(2)-1
		if absx < SMALL { // |x| < 2**-29
			if absx < TINY { // |x| < 2**-54
				ret x
			}
			ret x - x*x*0.5
		}
		if x > SQRT2_HALF_M1 { // sqrt(2)/2-1 < x
			// (sqrt(2)/2-1) < x < (sqrt(2)-1)
			k = 0
			f = x
			iu = 1
		}
	}
	let mut c: f64 = 0
	if k != 0 {
		let mut u: f64 = 0
		if absx < TWO53 { // 1<<53
			u = 1.0 + x
			iu = f64_bits(u)
			k = int((iu >> 52) - 1023)
			// correction term
			if k > 0 {
				c = 1.0 - (u - x)
			} else {
				c = x - (u - 1.0)
			}
			c /= u
		} else {
			u = x
			iu = f64_bits(u)
			k = int((iu >> 52) - 1023)
			c = 0
		}
		iu &= 0x000fffffffffffff

		if iu < 0x0006a09e667f3bcd { // mantissa of sqrt(2)
			u = f64_from_bits(iu | 0x3ff0000000000000) // normalize u
		} else {
			k++
			u = f64_from_bits(iu | 0x3fe0000000000000) // normalize u/2
			iu = (0x0010000000000000 - iu) >> 2
		}
		f = u - 1.0 // sqrt(2)/2 < u < sqrt(2)
	}
	let hfsq = 0.5 * f * f
	let mut s: f64 = 0
	let mut R: f64 = 0
	let mut z: f64 = 0
	if iu == 0 { // |f| < 2**-20
		if f == 0 {
			if k == 0 {
				ret 0
			}
			c += f64(k) * LN2_LO
			ret f64(k)*LN2_HI + c
		}
		R = hfsq * (1.0 - 0.66666666666666666*f) // avoid division
		if k == 0 {
			ret f - R
		}
		ret f64(k)*LN2_HI - ((R - (f64(k)*LN2_LO + c)) - f)
	}
	s = f / (2.0 + f)
	z = s * s
	R = z * (LP1 + z*(LP2+z*(LP3+z*(LP4+z*(LP5+z*(LP6+z*LP7))))))
	if k == 0 {
		ret f - (hfsq - s*(hfsq+R))
	}
	ret f64(k)*LN2_HI - ((hfsq - (s*(hfsq+R) + (f64(k)*LN2_LO + c))) - f)
}

// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/atan2.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Returns the arc tangent of y/x, using
// the signs of the two to determine the quadrant
// of the return value.
//
// Special cases are (in order):
//  atan2(y, nan) = nan
//  atan2(nan, x) = nan
//  atan2(+0, x>=0) = +0
//  atan2(-0, x>=0) = -0
//  atan2(+0, x<=-0) = +PI
//  atan2(-0, x<=-0) = -PI
//  atan2(y>0, 0) = +PI/2
//  atan2(y<0, 0) = -PI/2
//  atan2(+inf, +inf) = +PI/4
//  atan2(-inf, +inf) = -PI/4
//  atan2(+inf, -inf) = 3PI/4
//  atan2(-inf, -inf) = -3PI/4
//  atan2(y, +inf) = 0
//  atan2(y>0, -inf) = +PI
//  atan2(y<0, -inf) = -PI
//  atan2(+inf, x) = +PI/2
//  atan2(-inf, x) = -PI/2
pub fn atan2(y: f64, x: f64): f64 {
	// special cases
	match {
	| is_nan(y) | is_nan(x):
		ret nan()
	| y == 0:
		if x >= 0 && !signbit(x) {
			ret copysign(0, y)
		}
		ret copysign(PI, y)
	| x == 0:
		ret copysign(PI/2, y)
	| is_inf(x, 0):
		if is_inf(x, 1) {
			match {
			| is_inf(y, 0):
				ret copysign(PI/4, y)
			|:
				ret copysign(0, y)
			}
		}
		match {
		| is_inf(y, 0):
			ret copysign(3*PI/4, y)
		|:
			ret copysign(PI, y)
		}
	| is_inf(y, 0):
		ret copysign(PI/2, y)
	}

	// Call atan and determine the quadrant.
	let q = atan(y / x)
	if x < 0 {
		if q <= 0 {
			ret q + PI
		}
		ret q - PI
	}
	ret q
}

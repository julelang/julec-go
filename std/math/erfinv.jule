// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

/*
  Inverse of the floating-point error function.
*/

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/math/erfinv.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// This implementation is based on the rational approximation
// of percentage points of normal distribution available from
// https://www.jstor.org/stable/2347330.

// Coefficients for approximation to erf in |x| <= 0.85
const A0 = 1.1975323115670912564578e0
const A1 = 4.7072688112383978012285e1
const A2 = 6.9706266534389598238465e2
const A3 = 4.8548868893843886794648e3
const A4 = 1.6235862515167575384252e4
const A5 = 2.3782041382114385731252e4
const A6 = 1.1819493347062294404278e4
const A7 = 8.8709406962545514830200e2
const B0 = 1.0000000000000000000e0
const B1 = 4.2313330701600911252e1
const B2 = 6.8718700749205790830e2
const B3 = 5.3941960214247511077e3
const B4 = 2.1213794301586595867e4
const B5 = 3.9307895800092710610e4
const B6 = 2.8729085735721942674e4
const B7 = 5.2264952788528545610e3
// Coefficients for approximation to erf in 0.85 < |x| <= 1-2*exp(-25)
const C0 = 1.42343711074968357734e0
const C1 = 4.63033784615654529590e0
const C2 = 5.76949722146069140550e0
const C3 = 3.64784832476320460504e0
const C4 = 1.27045825245236838258e0
const C5 = 2.41780725177450611770e-1
const C6 = 2.27238449892691845833e-2
const C7 = 7.74545014278341407640e-4
const D0 = 1.4142135623730950488016887e0
const D1 = 2.9036514445419946173133295e0
const D2 = 2.3707661626024532365971225e0
const D3 = 9.7547832001787427186894837e-1
const D4 = 2.0945065210512749128288442e-1
const D5 = 2.1494160384252876777097297e-2
const D6 = 7.7441459065157709165577218e-4
const D7 = 1.4859850019840355905497876e-9
// Coefficients for approximation to erf in 1-2*exp(-25) < |x| < 1
const E0 = 6.65790464350110377720e0
const E1 = 5.46378491116411436990e0
const E2 = 1.78482653991729133580e0
const E3 = 2.96560571828504891230e-1
const E4 = 2.65321895265761230930e-2
const E5 = 1.24266094738807843860e-3
const E6 = 2.71155556874348757815e-5
const E7 = 2.01033439929228813265e-7
const F0 = 1.414213562373095048801689e0
const F1 = 8.482908416595164588112026e-1
const F2 = 1.936480946950659106176712e-1
const F3 = 2.103693768272068968719679e-2
const F4 = 1.112800997078859844711555e-3
const F5 = 2.611088405080593625138020e-5
const F6 = 2.010321207683943062279931e-7
const F7 = 2.891024605872965461538222e-15

// Returns the inverse error function of x.
//
// Special cases are:
//  erfinv(1) = +inf
//  erfinv(-1) = -inf
//  erfinv(x) = nan if x < -1 or x > 1
//  erfinv(nan) = nan
pub fn erfinv(mut x: f64): f64 {
	// special cases
	if is_nan(x) || x <= -1 || x >= 1 {
		if x == -1 || x == 1 {
			ret inf(int(x))
		}
		ret nan()
	}

	let mut sign = false
	if x < 0 {
		x = -x
		sign = true
	}

	let mut ans: f64 = 0
	if x <= 0.85 { // |x| <= 0.85
		let r = 0.180625 - 0.25*x*x
		let z1 = ((((((A7*r+A6)*r+A5)*r+A4)*r+A3)*r+A2)*r+A1)*r + A0
		let z2 = ((((((B7*r+B6)*r+B5)*r+B4)*r+B3)*r+B2)*r+B1)*r + B0
		ans = (x * z1) / z2
	} else {
		let mut z1: f64 = 0
		let mut z2: f64 = 0
		let mut r = sqrt(LN2 - log(1.0-x))
		if r <= 5.0 {
			r -= 1.6
			z1 = ((((((C7*r+C6)*r+C5)*r+C4)*r+C3)*r+C2)*r+C1)*r + C0
			z2 = ((((((D7*r+D6)*r+D5)*r+D4)*r+D3)*r+D2)*r+D1)*r + D0
		} else {
			r -= 5.0
			z1 = ((((((E7*r+E6)*r+E5)*r+E4)*r+E3)*r+E2)*r+E1)*r + E0
			z2 = ((((((F7*r+F6)*r+F5)*r+F4)*r+F3)*r+F2)*r+F1)*r + F0
		}
		ans = z1 / z2
	}

	if sign {
		ret -ans
	}
	ret ans
}

// Returns the inverse of erfc(x).
//
// Special cases are:
//  erfcinv(0) = +inf
//  erfcinv(2) = -inf
//  erfcinv(x) = nan if x < 0 or x > 2
//  erfcinv(nan) = nan
pub fn erfcinv(x: f64): f64 { ret erfinv(1 - x) }

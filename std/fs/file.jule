// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{
	self,
	seek,
	read,
	write,
	close,
	O_RDONLY,
	O_WRONLY,
	O_RDWR,
	O_APPEND,
	O_CREAT,
	O_EXCL,
	O_SYNC,
	O_TRUNC,
}

// Seek whence values.
pub enum Seek: int {
	Set = 0, // Seek relative to the origin of the file
	Cur = 1, // Seek relative to the current offset
	End = 2, // Seek relative to the end
}

// Flags to open wrapping those of the underlying system.
// Not all flags may be implemented on a given system.
// Exactly one of Rdonly, Wronly, or Rdwr must be specified.
pub enum OFlag: int {
	Rdonly = O_RDONLY, // Open the file read-only
	Wronly = O_WRONLY, // Open the file write-only
	Rdwr = O_RDWR,     // Open the file read-write
	Append = O_APPEND, // Append data to the file when writing
	Creat = O_CREAT,   // Create a new file if none exists
	Excl = O_EXCL,     // Used with Sema.Creat, file must not exist
	Sync = O_SYNC,     // Open for synchronous I/O
	Trunc = O_TRUNC,   // Truncate regular writable file when opened
}

// The file stream handle.
pub struct File {
	handle: int
}

impl File {
	// Sets offset to next Read/Write operation and returns the new offset.
	// whence: 0 (Seek.Set) means, relative to the origin of the file, 1 (Seek.Cur)
	// means relative to the current offset, and 2 (Seek.End) means relative to end.
	// Return 0 if error occurs.
	//
	// Possible errors:
	//  InvalidDescriptor SyncIO Overflow Seek
	pub fn seek(mut self, offset: i64, origin: Seek): (i64, FsError) {
		let pos = seek(self.handle, offset, int(origin))
		ret pos, FsError.Ok
	}

	// Read bytes to buffer from handle and returns readed byte count.
	// The number of bytes readed can never exceed the length of the buff.
	// If the buff is larger than the number of bytes that can be read,
	// the buffer will not cause an overflow. Offset will be shifted
	// by the number of bytes read.
	// Returns 0 if error occurs.
	//
	// Possible errors:
	//  Retry InvalidDescriptor Signal SyncIO IO IsDir Overflow Buffer
	//  InsufficientMemory Divice Seek
	pub fn read(mut self, mut buff: []byte): (n: int, FsError) {
		if buff.len == 0 {
			ret 0, FsError.Ok
		}
		n = unsafe { read(self.handle, &buff[0], uint(buff.len)) }
		if n == -1 {
			n = 0
			ret n, get_last_fs_error()
		}
		ret n, FsError.Ok
	}

	// Writes bytes to handle and returns writed byte count.
	// The number of bytes written can never exceed the length of the buff.
	// Returns 0 if error occurs.
	//
	// Possible errors:
	//  Retry InvalidDescriptor Big Signal IO NoSpace Pipe Range SyncIO
	//  Seek Divice Buffer
	pub fn write(mut self, buff: []byte): (n: int, FsError) {
		if buff.len == 0 {
			ret 0, FsError.Ok
		}
		n = unsafe { write(self.handle, &buff[0], uint(buff.len)) }
		if n == -1 {
			n = 0
			ret n, get_last_fs_error()
		}
		ret n, FsError.Ok
	}

	// Closes file handle.
	//
	// Possible errors:
	//  InvalidDescriptor Signal IO
	pub fn close(mut self): FsError {
		if close(self.handle) == -1 {
			ret get_last_fs_error()
		}
		ret FsError.Ok
	}
}

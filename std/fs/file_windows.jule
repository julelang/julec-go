// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{self, utf16_from_str}

// Opens file stream with named file, specified flag (Sema.Rdwr, Sema.Trunc etc.) and perm.
// If named file does not exist and Sema.Creat flag is passed, will created with
// mode (before umask). If successful, returns File reference with handle
// to file stream and the reference can used for I/O operations.
// Returns nil reference if error occurs.
//
// Possible errors:
//  Denied Exist Signal SyncIO IO IsDir Loop PerProcessLimit LongPath
//  SystemWideLimit NotExist UnableStream NoSpace NotDir Divice Overflow
//  ReadOnly Retry Busy
pub fn open(path: str, flag: OFlag, mode: int): (&File, FsError) {
	let utf16_path = utf16_from_str(path)
	let handle = unsafe { std::sys::_wopen(&utf16_path[0], int(flag), mode) }
	if handle == -1 {
		ret new(File), get_last_fs_error()
	}
	ret &File{handle: handle}, FsError.Ok
}

// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{
	get_last_errno,
	EACCES,
	EIO,
	ELOOP,
	ENAMETOOLONG,
	ENOENT,
	ENOTDIR,
	EOVERFLOW,
	EBADF,
	EMFILE,
	ENFILE,
	ENOMEM,
	EEXIST,
	EINTR,
	EINVAL,
	EISDIR,
	ENOSR,
	ENOSPC,
	ENXIO,
	EROFS,
	EAGAIN,
	ETXTBSY,
	EFBIG,
	EPIPE,
	ERANGE,
	ESPIPE,
	ENOBUFS,
	EBADMSG
}

// File system error codes.
pub enum FsError {
	Ok,                 // No problem
	Denied,             // Search permission is denied for a component of the path prefix
	IO,                 // Input/Output error, an error occurred while reading from the file system
	Loop,               // A loop exists in symbolic links encountered during resolution of the path argument
	LongPath,           // The length of the path argument exceeds maxium path length or a pathname component is longer than maximum name length
	NotExist,           // A component of path does not name an existing file or path is an empty string
	NotDir,             // A component of the path prefix is not a directory
	Overflow,           // The file size in bytes or the number of blocks allocated to the file or the file serial number cannot be represented correctly in the structure pointed to by buf
	InvalidDescriptor,  // fd is not a valid file descriptor opened for reading
	PerProcessLimit,    // The per-process limit on the number of open file descriptors has been reached
	SystemWideLimit,    // The system-wide limit on the total number of open files has been reached
	InsufficientMemory, // Insufficient memory to complete the operation
	Exist,              // A component of path does name an existing file
	Signal,             // A signal was caught during
	SyncIO,             // The implementation does not support synchronized I/O for this file
	IsDir,              // The named file is a directory and flag includes O_WRONLY or O_RDWR
	UnableStream,       // The path argument names a STREAMS-based file and the system is unable to allocate a STREAM
	NoSpace,            // There is no space on the drive
	Divice,             // Divice did not respond
	ReadOnly,           // Read-only filesystem
	Retry,              // Resource temporarily unavailable
	Busy,               // File is busy
	Big,                // File too large
	Pipe,               // Broken pipe
	Range,              // Input is outside the range
	Seek,               // Illegal seek
	Buffer,             // No buffer space available
	BadMessage,         // Not a data message
}

// Returns last filesystem error by errno.
fn get_last_fs_error(): FsError {
	let err = get_last_errno()
	match err {
	| EACCES:       ret FsError.Denied
	| EIO:          ret FsError.IO
	| ELOOP:        ret FsError.Loop
	| ENAMETOOLONG: ret FsError.LongPath
	| ENOENT:       ret FsError.NotExist
	| ENOTDIR:      ret FsError.NotDir
	| EOVERFLOW:    ret FsError.Overflow
	| EBADF:        ret FsError.InvalidDescriptor
	| EMFILE:       ret FsError.PerProcessLimit
	| ENFILE:       ret FsError.SystemWideLimit
	| ENOMEM:       ret FsError.InsufficientMemory
	| EEXIST:       ret FsError.Exist
	| EINTR:        ret FsError.Signal
	| EINVAL:       ret FsError.SyncIO
	| EISDIR:       ret FsError.IsDir
	| ENOSR:        ret FsError.UnableStream
	| ENOSPC:       ret FsError.NoSpace
	| ENXIO:        ret FsError.Divice
	| EROFS:        ret FsError.ReadOnly
	| EAGAIN:       ret FsError.Retry
	| ETXTBSY:      ret FsError.Busy
	| EFBIG:        ret FsError.Big
	| EPIPE:        ret FsError.Pipe
	| ERANGE:       ret FsError.Range
	| ESPIPE:       ret FsError.Seek
	| ENOBUFS:      ret FsError.Buffer
	| EBADMSG:      ret FsError.BadMessage
	|:              ret FsError.Ok
	}
}

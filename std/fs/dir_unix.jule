// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::path::{join}
use std::sys::{
	byte_ptr_to_str,
	opendir,
	readdir,
	closedir
}

// Reads the named directory and returs all its directory entries can read.
// Returns nil if no any directory entry or error occurs.
//
// Possible errors:
//  Denied InvalidDescriptor PerProcessLimit SystemWideLimit
//  NotExist InsufficientMemory NotDir
pub fn read_dir(path: str): (dirents: []&DirEntry, err: FsError) {
	let mut dir = unsafe { opendir(&path[0]) }
	if dir == nil {
		err = get_last_fs_error()
		ret
	}
	for {
		let dirent = unsafe { readdir(dir) }
		if dirent == nil {
			break
		}
		let name = unsafe { byte_ptr_to_str((*u8)(dirent.d_name)) }
		let (stat, serr) = stat(join(path, name))
		if serr != FsError.Ok {
			err = serr
			dirents = nil
			break
		}
		dirents = append(dirents, &DirEntry{
			name: name,
			stat: stat,
		})
	}
	_ = unsafe { closedir(dir) }
	ret
}

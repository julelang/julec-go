// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Constant data.
// Use new_nil function istead of Const{} for nil literal.
pub struct Const {
	data: any
}

// Returns new constant value instance from 64-bit signed integer.
pub fn new_i64(x: i64): &Const { ret &Const{data: x} }
// Returns new constant value instance from 64-bit unsigned integer.
pub fn new_u64(x: u64): &Const { ret &Const{data: x} }
// Returns new constant value instance from boolean.
pub fn new_bool(x: bool): &Const { ret &Const{data: x} }
// Returns new constant value instance from string.
pub fn new_str(x: str): &Const { ret &Const{data: x} }
// Returns new constant value instance from 64-bit floating-point.
pub fn new_f64(x: f64): &Const { ret &Const{data: x} }
// Returns new constant value instance with nil.
pub fn new_nil(): &Const { ret &Const{data: nil} }

impl Const {
	//
	// Read
	//

	// Reads 64-bit signed integer data.
	// Returns 0 if data is not 64-bit signed integer.
	pub fn read_i64(self): i64 {
		if !self.is_i64() {
			ret 0
		}
		ret i64(self.data)
	}

	// Reads 64-bit unsigned integer data.
	// Returns 0 if data is not 64-bit unsigned integer.
	pub fn read_u64(self): u64 {
		if !self.is_u64() {
			ret 0
		}
		ret u64(self.data)
	}

	// Reads boolean data.
	// Returns false if data is not boolean.
	pub fn read_bool(self): bool {
		if !self.is_bool() {
			ret false
		}
		ret bool(self.data)
	}

	// Reads string data.
	// Returns empty string if data is not string.
	pub fn read_str(self): str {
		if !self.is_str() {
			ret ""
		}
		ret (str)(self.data)
	}

	// Reads 64-bit floating-point data.
	// Returns 0 if data is not 64-bit floating-point.
	pub fn read_f64(self): f64 {
		if !self.is_f64() {
			ret 0
		}
		ret f64(self.data)
	}

	//
	// Castings
	//

	// Reads data as 64-bit signed integer.
	// Returns 0 if data is string, bool or which is not numeric.
	pub fn as_i64(self): i64 {
		match type self.data {
		| i64:
			ret i64(self.data)

		| u64:
			ret i64(u64(self.data))

		| f64:
			ret i64(f64(self.data))

		|:
			ret 0
		}
	}

	// Reads data as 64-bit unsigned integer.
	// Returns 0 if data is string, bool or which is not numeric.
	pub fn as_u64(self): u64 {
		match type self.data {
		| u64:
			ret u64(self.data)

		| i64:
			ret u64(i64(self.data))

		| f64:
			ret u64(f64(self.data))

		|:
			ret 0
		}
	}

	// Reads data as 64-bit floating-point.
	// Returns 0 if data is string, bool or which is not numeric.
	pub fn as_f64(self): f64 {
		match type self.data {
		| f64:
			ret f64(self.data)

		| i64:
			ret f64(i64(self.data))

		| u64:
			ret f64(u64(self.data))

		|:
			ret 0
		}
	}

	//
	// Set
	//


	// Sets constant value from 64-bit signed integer.
	pub fn set_i64(mut self, x: i64) { self.data = x }
	// Sets constant value from 64-bit unsigned integer.
	pub fn set_u64(mut self, x: u64) { self.data = x }
	// Sets constant value from boolean.
	pub fn set_bool(mut self, x: bool) { self.data = x }
	// Sets constant value from string.
	pub fn set_str(mut self, x: str) { self.data = x }
	// Sets constant value from 64-bit floating-point.
	pub fn set_f64(mut self, x: f64) { self.data = x }
	// Sets constant value to nil.
	pub fn set_nil(mut self) { self.data = nil }

	fn set_by_type(mut self, v: f64, x: Const) {
		match {
		| x.is_f64(): self.set_f64(v)
		| self.is_f64(): self.set_f64(v)
		| self.is_i64(): self.set_i64(i64(v))
		| self.is_u64(): self.set_u64(u64(v))
		}
	}

	//
	// Types
	//

	// Reports whether data is 64-bit signed integer.
	pub fn is_i64(self): bool {
		match type self.data {
		| i64: ret true
		|:     ret false
		}
	}

	// Reports whether data is 64-bit unsigned integer.
	pub fn is_u64(self): bool {
		match type self.data {
		| u64: ret true
		|:     ret false
		}
	}

	// Reports whether data is boolean.
	pub fn is_bool(self): bool {
		match type self.data {
		| bool: ret true
		|:      ret false
		}
	}

	// Reports whether data is string.
	pub fn is_str(self): bool {
		match type self.data {
		| str: ret true
		|:     ret false
		}
	}

	// Reports whether data is 64-bit floating-point.
	pub fn is_f64(self): bool {
		match type self.data {
		| f64: ret true
		|:     ret false
		}
	}

	// Reports whether data is nil.
	pub fn is_nil(self): bool { ret self.data == nil }

	// Reports whether self and x has same type.
	pub fn are_same_types(self, x: Const): bool {
		match {
		| self.is_i64() == x.is_i64():   ret true
		| self.is_u64() == x.is_u64():   ret true
		| self.is_f64() == x.is_f64():   ret true
		| self.is_bool() == x.is_bool(): ret true
		| self.is_str() == x.is_str():   ret true
		| self.is_nil() == x.is_nil():   ret true
		|:                               ret false
		}
	}

	//
	// Logical
	//

	// Reports whether self and x are true.
	// Returns false if type is not supported.
	pub fn and(self, x: Const): bool {
		match {
		| self.is_bool() && x.is_bool():
			ret self.read_bool() && x.read_bool()

		|:
			ret false
		}
	}

	// Reports whether self or x is true.
	// Returns false if type is not supported.
	pub fn or(self, x: Const): bool {
		match {
		| self.is_bool() && x.is_bool():
			ret self.read_bool() || x.read_bool()

		|:
			ret false
		}
	}

	// Reports whether self and x are equals.
	// Returns false if type is not supported.
	pub fn eqs(self, x: Const): bool {
		match {
		| self.is_nil():
			ret x.is_nil()

		| self.is_bool():
			ret x.is_bool() && self.read_bool() == x.read_bool()

		| self.is_str():
			ret x.is_str() && self.read_str() == x.read_str()

		| self.is_i64():
			ret self.read_i64() == x.as_i64()

		| self.is_u64():
			ret self.read_u64() == x.as_u64()

		| self.is_f64():
			ret self.read_f64() == x.as_f64()

		|:
			ret false
		}
	}

	// Reports whether self less than x.
	// Returns false if type is unsupported by operation.
	//
	// Supported types are:
	//  - 64-bit signed integer
	//  - 64-bit unsigned integer
	//  - 64-bit floating-point
	pub fn lt(self, x: Const): bool {
		match {
		| self.is_i64():
			ret self.read_i64() < x.as_i64()

		| self.is_u64():
			ret self.read_u64() < x.as_u64()

		| self.is_f64():
			ret self.read_f64() < x.as_f64()

		|:
			ret false
		}
	}

	// Reports whether self greater than x.
	// Returns false if type is unsupported by operation.
	//
	// Supported types are:
	//  - 64-bit signed integer
	//  - 64-bit unsigned integer
	//  - 64-bit floating-point
	pub fn gt(self, x: Const): bool {
		match {
		| self.is_i64():
			ret self.read_i64() > x.as_i64()

		| self.is_u64():
			ret self.read_u64() > x.as_u64()

		| self.is_f64():
			ret self.read_f64() > x.as_f64()

		|:
			ret false
		}
	}

	//
	// Ops
	//

	// Adds x's value to itself value.
	// Reports whether operation is success.
	pub fn add(mut self, x: Const): bool {
		match {
		| self.is_str():
			if !x.is_str() {
				ret false
			}
			self.set_str(self.read_str() + x.read_str())

		| self.is_f64()
		| self.is_i64()
		| self.is_u64():
			self.set_by_type(self.as_f64() + x.as_f64(), x)

		|:
			ret false
		}
		ret true
	}

	// Subs x's value from itself value.
	// Reports whether operation is success.
	pub fn sub(mut self, x: Const): bool {
		match {
		| self.is_f64()
		| self.is_i64()
		| self.is_u64():
			self.set_by_type(self.as_f64() - x.as_f64(), x)

		|:
			ret false
		}
		ret true
	}

	// Multiplies x's value to c's value.
	// Reports whether operation is success.
	pub fn mul(mut self, x: Const): bool {
		match {
		| self.is_f64()
		| self.is_i64()
		| self.is_u64():
			self.set_by_type(self.as_f64() * x.as_f64(), x)

		|:
			ret false
		}
		ret true
	}

	// Divides itself value to x's value.
	// Reports whether operation is success.
	// Reports false if divided-by-zero.
	//
	// NOTICE
	//  This operation makes constant value is floating-point.
	pub fn div(mut self, x: Const): bool {
		match {
		| self.is_f64():
			let l = x.as_f64()
			if l == 0 {
				ret false
			}
			self.set_f64(self.read_f64() / l)

		| self.is_i64():
			let l = x.as_f64()
			if l == 0 {
				ret false
			}
			self.set_f64(self.as_f64() / l)

		| self.is_u64():
			let l = x.as_f64()
			if l == 0 {
				ret false
			}
			self.set_f64(self.as_f64() / l)

		|:
			ret false
		}
		ret true
	}

	// Mods itself value to x's value.
	// Reports whether operation is success.
	// Reports false if divided-by-zero.
	pub fn mod(mut self, x: Const): bool {
		match {
		| self.is_i64():
			let l = x.as_i64()
			if l == 0 {
				ret false
			}
			self.set_i64(self.read_i64() % l)

		| self.is_u64():
			let l = x.as_u64()
			if l == 0 {
				ret false
			}
			self.set_u64(self.read_u64() % l)

		|:
			ret false
		}
		ret true
	}

	// Bitwise and itself value to x's value.
	// Reports whether operation is success.
	pub fn bitwise_and(mut self, x: Const): bool {
		match {
		| self.is_i64():
			self.set_i64(self.read_i64() & x.as_i64())

		| self.is_u64():
			self.set_u64(self.read_u64() & x.as_u64())

		|:
			ret false
		}
		ret true
	}

	// Bitwise or itself value to x's value.
	// Reports whether operation is success.
	pub fn bitwise_or(mut self, x: Const): bool {
		match {
		| self.is_i64():
			self.set_i64(self.read_i64() | x.as_i64())

		| self.is_u64():
			self.set_u64(self.read_u64() | x.as_u64())

		|:
			ret false
		}
		ret true
	}

	// Bitwise xor itself value to x's value.
	// Reports whether operation is success.
	pub fn xor(mut self, x: Const): bool {
		match {
		| self.is_i64():
			self.set_i64(self.read_i64() ^ x.as_i64())

		| self.is_u64():
			self.set_u64(self.read_u64() ^ x.as_u64())

		|:
			ret false
		}
		ret true
	}

	// Left shifts itself value to x's value.
	// Reports whether operation is success.
	pub fn lshift(mut self, x: Const): bool {
		match {
		| self.is_i64():
			let l = self.as_i64()
			if l < 0 {
				let r = x.as_u64()
				self.set_i64(l << r)
			} else {
				unsafe { lshift_unsig(&self, x) }
			}

		| self.is_u64():
			unsafe { lshift_unsig(&self, x) }

		|:
			ret false
		}

		ret true
	}

	// Right shifts itself value to x's value.
	// Reports whether operation is success.
	pub fn rshift(mut self, x: Const): bool {
		match {
		| self.is_i64():
			let l = self.as_i64()
			if l < 0 {
				let r = x.as_u64()
				self.set_i64(l >> r)
			} else {
				unsafe { rshift_unsig(&self, x) }
			}

		| self.is_u64():
			unsafe { rshift_unsig(&self, x) }

		|:
			ret false
		}

		ret true
	}
}

unsafe fn lshift_unsig(mut c: *Const, x: Const) {
	let l = c.as_u64()
	let r = x.as_u64()
	c.set_u64(l << r)
}

unsafe fn rshift_unsig(mut c: *Const, x: Const) {
	let l = c.as_u64()
	let r = x.as_u64()
	c.set_u64(l >> r)
}

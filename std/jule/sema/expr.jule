// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Expression model.
pub type ExprModel: any

// Binary operation expression model.
pub struct BinopExprModel {
	pub left:  ExprModel
	pub right: ExprModel
	pub op:    str
}

// Unary operation expression model.
pub struct UnaryExprModel {
	pub expr: ExprModel
	pub op:   str
}

// Pointer getter expression for reference types.
// For example: &my_reference
pub struct GetRefPtrExprModel {
	pub expr: ExprModel
}

// Structure field argument expression model for constructors.
// For example: &MyStruct{10, false, "-"}
pub struct StructArgExprModel {
	pub field: &FieldIns
	pub expr:  ExprModel
}

// Structure literal.
pub struct StructLitExprModel {
	pub strct: &StructIns
	pub args:  []&StructArgExprModel
}

// Heap allocated structure litral expression.
// For example: &MyStruct{}
pub struct AllocStructLitExprModel {
	pub lit: &StructLitExprModel
}

// Casting expression model.
// For example: (int)(my_float)
pub struct CastingExprModel {
	pub expr:      ExprModel
	pub kind:      &TypeKind
	pub expr_kind: &TypeKind
}

// Function call expression model.
pub struct FnCallExprModel {
	pub func:  &FnIns
	pub is_co: bool
	pub expr:  ExprModel
	pub args:  []ExprModel
}

// Slice expression model.
// For example: [1, 2, 3, 4, 5, 6, 8, 9, 10]
pub struct SliceExprModel {
	pub elem_kind: &TypeKind
	pub elems:     []ExprModel
}

// Indexing expression model.
// For example: my_slice[my_index]
pub struct IndexigExprModel {
	pub expr:  ExprModel
	pub index: ExprModel
}

// Anonymous function expression model.
pub struct AnonFnExprModel {
	pub func:   &FnIns
	pub global: bool
}

// Key-value expression pair model.
pub struct KeyValPairExprModel {
	pub key: ExprModel
	pub val: ExprModel
}

// Map expression model.
// For example; {0: false, 1: true}
pub struct MapExprModel {
	pub key_kind: &TypeKind
	pub val_kind: &TypeKind
	pub entries:  []&KeyValPairExprModel
}

// Slicing expression model.
// For example: my_slice[2:my_slice.len-5]
pub struct SlicingExprModel {
	// Expression to slicing.
	pub expr: ExprModel
	// Left index expression.
	// Zero integer if expression have not left index.
	pub left: ExprModel
	// Right index expression.
	// Nil if expression have not right index.
	pub right: ExprModel
}

// Trait sub-ident expression model.
// For example: my_trait.my_sub_ident
pub struct TraitSubIdentExprModel {
	pub expr:  ExprModel
	pub ident: str
}

// Structure sub-ident expression model.
// For example: my_struct.my_sub_ident
pub struct StructSubIdentExprModel {
	pub expr:      ExprModel
	pub expr_kind: &TypeKind
	pub method:    &FnIns
	pub field:     &FieldIns
}

// Array expression model.
pub struct ArrayExprModel {
	pub kind:  &Arr
	pub elems: []ExprModel
}

// Common ident expression model.
pub struct CommonIdentExprModel {
	pub ident: str
}

// Common sub-ident expression model.
pub struct CommonSubIdentExprModel {
	pub expr:  ExprModel
	pub ident: str
}

// Tuple expression model.
pub struct TupleExprModel {
	pub datas: []&Data
}

// Expression model for built-in out function calls.
pub struct BuiltinOutCallExprModel {
	pub expr: ExprModel
}

// Expression model for built-in outln function calls.
pub struct BuiltinOutlnCallExprModel {
	pub expr: ExprModel
}

// Expression model for built-in clone function calls.
pub struct BuiltinCloneCallExprModel {
	pub expr: ExprModel
}

// Expression model for built-in new function calls.
pub struct BuiltinNewCallExprModel {
	pub kind: &TypeKind // Element type of reference.
	pub init: ExprModel // Nil for not initialized.
}

// Expression model for built-in real function calls.
pub struct BuiltinRealCallExprModel {
	pub expr: ExprModel
}

// Expression model for built-in drop function calls.
pub struct BuiltinDropCallExprModel {
	pub expr: ExprModel
}

// Expression model for built-in panic function calls.
pub struct BuiltinPanicCallExprModel {
	pub expr: ExprModel
}

// Expression model for built-in make function calls.
pub struct BuiltinMakeCallExprModel {
	pub kind: &TypeKind
	pub size: ExprModel // Nil for nil slice.
}

// Expression model for sub-ident expression to built-in Error trait.
pub struct BuiltinErrorTraitSubIdentExprModel {
	pub expr:  ExprModel
	pub ident: str
}

// Expression model for sizeof expressions.
// For example, in C++: sizeof(int)
pub struct SizeofExprModel {
	pub expr: ExprModel
}

// Expression model for alignof expressions.
// For example, in C++: alignof(int)
pub struct AlignofExprModel {
	pub expr: ExprModel
}

// Expression model for constructor call of str type.
// For example: str(my_expr)
pub struct StrConstructorCallExprModel {
	pub expr: ExprModel
}

// Rune literal expression model.
// For example: 'a'
pub struct RuneExprModel {
	pub code: rune
}

// Expression model for explicit dereferencing of reference.
pub struct ExplicitDerefExprModel {
	pub expr: ExprModel
}

// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{
	FnCallExpr,
	TypeDecl,
	IdentTypeDecl,
}
use std::jule::build::{Derives}

// Type alias for built-in function callers.
//
// Parameters;
//  e: Caller owner Eval instance.
//  fc: Function call expression.
//  d: Data instance for evaluated expression of function.
type BuiltinCaller: fn(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data

let mut BUILTIN_FN_OUT = &FnIns{}
let mut BUILTIN_FN_OUTLN = &FnIns{}
let mut BUILTIN_FN_NEW = &FnIns{}
let mut BUILTIN_FN_DROP = &FnIns{}
let mut BUILTIN_FN_PANIC = &FnIns{}
let mut BUILTIN_FN_MAKE = &FnIns{}
let mut BUILTIN_FN_APPEND = &FnIns{}
let mut BUILTIN_FN_RECOVER = &FnIns{}
let mut BUILTIN_FN_CLONE = &FnIns{}
let mut BUILTIN_FN_STD_MEM_SIZE_OF = &FnIns{}
let mut BUILTIN_FN_STD_MEM_ALIGN_OF = &FnIns{}

let mut BUILTIN_FN_REAL = &FnIns{
	result: &TypeKind{kind: build_prim_type((str)(PrimKind.Bool))},
}

let mut BUILTIN_FN_COPY = &FnIns{
	result: &TypeKind{kind: build_prim_type((str)(PrimKind.Int))},
}

let mut BUILTIN_TYPE_ALIAS_BYTE = &TypeAlias{
	public: true,
	kind: &TypeSymbol{
		kind: &TypeKind{kind: build_prim_type((str)(PrimKind.U8))},
	},
}

let mut BUILTIN_TYPE_ALIAS_RUNE = &TypeAlias{
	public: true,
	kind: &TypeSymbol{
		kind: &TypeKind{kind: build_prim_type((str)(PrimKind.I32))},
	},
}

let mut BUILTIN_TRAIT_ERROR = &Trait{
	public: true,
	ident:  "Error",
	methods: [
		&Fn{
			public: true,
			ident:  "error",
			params: [
				&Param{
					ident: "self",
				},
			],
			result: &RetType{
				kind: &TypeSymbol{
					decl: &TypeDecl{kind: &IdentTypeDecl{ident: "str"}},
				},
			},
		},
	],
}

fn init() {
	BUILTIN_FN_OUT.caller = builtin_caller_out
	BUILTIN_FN_OUTLN.caller = builtin_caller_outln
	BUILTIN_FN_NEW.caller = builtin_caller_new
	BUILTIN_FN_REAL.caller = builtin_caller_real
	BUILTIN_FN_DROP.caller = builtin_caller_drop
	BUILTIN_FN_PANIC.caller = builtin_caller_panic
	BUILTIN_FN_MAKE.caller = builtin_caller_make
	BUILTIN_FN_APPEND.caller = builtin_caller_append
	BUILTIN_FN_COPY.caller = builtin_caller_copy
	BUILTIN_FN_RECOVER.caller = builtin_caller_recover
	BUILTIN_FN_CLONE.caller = builtin_caller_clone

	BUILTIN_FN_STD_MEM_SIZE_OF.caller = builtin_caller_std_mem_size_of
	BUILTIN_FN_STD_MEM_ALIGN_OF.caller = builtin_caller_std_mem_align_of

	for (_, mut f) in BUILTIN_TRAIT_ERROR.methods {
		let mut ins = f.instance()
		ins.caller = builtin_caller_common
		f.append_instance(ins)
	}
}

fn find_builtin_fn(ident: str): &FnIns {
	match ident {
	| "out":     ret BUILTIN_FN_OUT
	| "outln":   ret BUILTIN_FN_OUTLN
	| "new":     ret BUILTIN_FN_NEW
	| "real":    ret BUILTIN_FN_REAL
	| "drop":    ret BUILTIN_FN_DROP
	| "panic":   ret BUILTIN_FN_PANIC
	| "make":    ret BUILTIN_FN_MAKE
	| "append":  ret BUILTIN_FN_APPEND
	| "copy":    ret BUILTIN_FN_COPY
	| "recover": ret BUILTIN_FN_RECOVER
	| "clone":   ret BUILTIN_FN_CLONE
	|:           ret new(FnIns)
	}
}

fn find_builtin_type_alias(ident: str): &TypeAlias {
	match ident {
	| "byte": ret BUILTIN_TYPE_ALIAS_BYTE
	| "rune": ret BUILTIN_TYPE_ALIAS_RUNE
	|:        ret new(TypeAlias)
	}
}

fn find_builtin_trait(ident: str): &Trait {
	match ident {
	| "Error": ret BUILTIN_TRAIT_ERROR
	|:         ret new(Trait)
	}
}

fn find_builtin_def(ident: str): any {
	let mut f = find_builtin_fn(ident)
	if real(f) {
		ret f
	}

	let mut ta = find_builtin_type_alias(ident)
	if real(ta) {
		ret ta
	}

	let mut t = find_builtin_trait(ident)
	if real(t) {
		ret t
	}

	ret nil
}

fn find_builtin_def_std_mem(ident: str): any {
	match ident {
	| "size_of":  ret BUILTIN_FN_STD_MEM_SIZE_OF
	| "align_of": ret BUILTIN_FN_STD_MEM_ALIGN_OF
	|:            ret nil
	}
}

fn find_package_builtin_def(link_path: str, ident: str): any {
	match link_path {
	| "std::mem": ret find_builtin_def_std_mem(ident)
	|:            ret nil
	}
}

fn builtin_caller_common_plain(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	let mut f = d.kind.fnc()

	let mut fcac = FnCallArgChecker{
		e:                  e,
		f:                  f,
		args:               fc.args,
		dynamic_annotation: false,
		error_token:        fc.token,
	}
	_ = fcac.check()

	let mut model = &FnCallExprModel{
		func:  f,
		is_co: fc.concurrent,
		expr:  d.model,
		args:  fcac.arg_models,
	}

	if !real(f.result) {
		d = build_void_data()
	} else {
		d = &Data{
			kind: f.result,
		}
	}

	d.model = model
	ret d
}

fn builtin_caller_common(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}

	ret builtin_caller_common_plain(e, fc, d)
}

fn builtin_caller_common_mut(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	if !d.mutable {
		e.push_err(fc.token, "mutable_operation_on_immutable")
	}
	ret builtin_caller_common(e, fc, d)
}

fn builtin_caller_out(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "v")
		ret new(Data)
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[1].token, "argument_overflow")
	}

	let mut expr = e.eval_expr(fc.args[0])
	if !real(expr) {
		ret new(Data)
	}

	if expr.is_void() || real(expr.kind.fnc()) {
		e.push_err(fc.args[0].token, "invalid_expr")
		ret new(Data)
	}

	let mut d = build_void_data()
	d.model = &BuiltinOutCallExprModel{expr: expr.model}
	ret d
}

fn builtin_caller_outln(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	let mut d = builtin_caller_out(e, fc, new(Data))
	if !real(d) {
		ret new(Data)
	}

	d.model = &BuiltinOutlnCallExprModel{
		expr: (&BuiltinOutCallExprModel)(d.model).expr,
	}
	ret d
}

fn builtin_caller_new(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "type")
		ret new(Data)
	}
	if fc.args.len > 2 {
		e.push_err(fc.args[2].token, "argument_overflow")
	}

	let mut t = e.eval_expr_kind(fc.args[0].kind)
	if !real(t) {
		ret new(Data)
	}

	if !t.decl {
		e.push_err(fc.args[0].token, "invalid_type")
		ret new(Data)
	}

	if !is_valid_for_ref(t.kind) {
		let mut s = t.kind.strct()
		if real(s) && real(s.decl) && s.decl.cpp_linked {
			e.push_err(fc.args[0].token, "cpp_linked_struct_for_ref")
		} else {
			e.push_err(fc.args[0].token, "invalid_type")
		}
		ret new(Data)
	}

	d.kind = &TypeKind{kind: &Ref{elem: t.kind.clone()}}

	if fc.args.len == 2 { // Initialize expression.
		let mut init = e.s.evalp(fc.args[1], e.lookup, &TypeSymbol{kind: t.kind})
		if real(init) {
			t.mutable = true
			_ = check_mut(e.s, t, init, fc.args[1].token)
			e.s.check_assign_type(t.kind, init, fc.args[1].token, false)
			d.model = &BuiltinNewCallExprModel{
				kind: t.kind,
				init: init.model,
			}
		}
	} else {
		d.model = &BuiltinNewCallExprModel{kind: t.kind}
	}

	ret d
}

fn builtin_caller_real(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "ref")
		ret new(Data)
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[2].token, "argument_overflow")
	}

	let mut ref = e.eval_expr(fc.args[0])
	if !real(ref) {
		ret new(Data)
	}

	if !real(ref.kind.ref()) {
		e.push_err(fc.args[0].token, "invalid_expr")
		ret new(Data)
	}

	d.kind = BUILTIN_FN_REAL.result
	d.model = &BuiltinRealCallExprModel{expr: ref.model}
	ret d
}

fn builtin_caller_drop(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "ref")
		ret new(Data)
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[2].token, "argument_overflow")
	}

	let mut ref = e.eval_expr(fc.args[0])
	if !real(ref) {
		ret new(Data)
	}

	if !real(ref.kind.ref()) {
		e.push_err(fc.args[0].token, "invalid_expr")
		ret new(Data)
	}

	_ = check_mut(e.s, ref, new(Data), fc.args[0].token)

	let mut d = build_void_data()
	d.model = &BuiltinDropCallExprModel{expr: ref.model}
	ret d
}

fn builtin_caller_panic(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "error")
		ret new(Data)
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[2].token, "argument_overflow")
	}

	let mut expr = e.eval_expr(fc.args[0])
	if !real(expr) {
		ret new(Data)
	}

	if real(expr.kind.strct()) {
		let s = expr.kind.strct()
		if s.decl.is_implements(BUILTIN_TRAIT_ERROR) {
			expr.cast_kind = &TypeKind{
				kind: BUILTIN_TRAIT_ERROR,
			}
			apply_cast_kind(expr)
		}
	}

	let mut d = build_void_data()
	d.model = &BuiltinPanicCallExprModel{expr: expr.model}
	ret d
}

fn builtin_caller_make(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 2 {
		if fc.args.len == 1 {
			e.push_err(fc.token, "missing_expr_for", "size")
			ret new(Data)
		}
		e.push_err(fc.token, "missing_expr_for", "type, size")
		ret new(Data)
	}
	if fc.args.len > 2 {
		e.push_err(fc.args[2].token, "argument_overflow")
	}

	let mut t = e.eval_expr_kind(fc.args[0].kind)
	if !real(t) {
		ret new(Data)
	}

	if !t.decl || !real(t.kind.slc()) {
		e.push_err(fc.args[0].token, "invalid_type")
		ret new(Data)
	}

	d.kind = t.kind

	let mut size = e.s.evalp(fc.args[1], e.lookup, &TypeSymbol{kind: t.kind})
	if !real(size) {
		ret d
	}

	e.check_integer_indexing_by_data(size, fc.args[1].token)

	// Ignore size expression if size is constant zero.
	if size.is_const() && size.constant.as_i64() == 0 {
		size.model = nil
	}

	d.model = &BuiltinMakeCallExprModel{
		kind: t.kind,
		size: size.model,
	}

	ret d
}

fn builtin_caller_append(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 2 {
		if fc.args.len == 1 {
			e.push_err(fc.token, "missing_expr_for", "src")
			ret new(Data)
		}
		e.push_err(fc.token, "missing_expr_for", "src, values")
		ret new(Data)
	}

	let mut t = e.eval_expr(fc.args[0])
	if !real(t) {
		ret new(Data)
	}

	let mut ref = false
	if real(t.kind.ref()) {
		t.kind = t.kind.ref().elem
		ref = true
	}

	if !real(t.kind.slc()) {
		e.push_err(fc.args[0].token, "invalid_expr")
		ret new(Data)
	}

	let mut f = &FnIns{
		params: [
			&ParamIns{
				decl: &Param{},
				kind: t.kind.clone(),
			},
			&ParamIns{
				decl: &Param{
					mutable:  true,
					variadic: true,
				},
				kind: t.kind.slc().elem.clone(),
			},
		],
		result: t.kind.clone(),
		caller: builtin_caller_common_plain,
	}
	d.kind = &TypeKind{kind: f}
	d.model = &CommonIdentExprModel{ident: "append"}

	d = builtin_caller_common_plain(e, fc, d)
	if real(d) && ref {
		(&FnCallExprModel)(d.model).args[0] = &ExplicitDerefExprModel{
			expr: t.model,
		}
	}
	ret d
}

fn builtin_caller_copy(mut e: &Eval, mut fc: &FnCallExpr, mut d: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	if fc.args.len < 2 {
		if fc.args.len == 1 {
			e.push_err(fc.token, "missing_expr_for", "src")
			ret new(Data)
		}
		e.push_err(fc.token, "missing_expr_for", "src, values")
		ret new(Data)
	}
	if fc.args.len > 2 {
		e.push_err(fc.args[2].token, "argument_overflow")
	}

	let mut t = e.eval_expr(fc.args[0])
	if !real(t) {
		ret new(Data)
	}

	let mut ref = false
	if real(t.kind.ref()) {
		t.kind = t.kind.ref().elem
		ref = false
	}

	if !real(t.kind.slc()) {
		e.push_err(fc.args[0].token, "invalid_expr")
		ret new(Data)
	}

	if !t.mutable {
		e.push_err(fc.args[0].token, "mutable_operation_on_immutable")
	}

	let mut f = &FnIns{
		params: [
			&ParamIns{
				decl: &Param{},
				kind: t.kind.clone(),
			},
			&ParamIns{
				decl: &Param{
					mutable: true,
				},
				kind: t.kind.clone(),
			},
		],
		result: BUILTIN_FN_COPY.result,
		caller: builtin_caller_common_plain,
	}

	d.kind = &TypeKind{kind: f}
	d.model = &CommonIdentExprModel{ident: "copy"}

	d = builtin_caller_common_plain(e, fc, d)
	if real(d) && ref {
		(&FnCallExprModel)(d.model).args[0] = &ExplicitDerefExprModel{
			expr: t.model,
		}
	}
	ret d
}

fn builtin_caller_recover(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	const HANDLER_KIND = "fn(Error)"

	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "handler")
		ret new(Data)
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[1].token, "argument_overflow")
	}

	let mut t = e.eval_expr(fc.args[0])
	if !real(t) {
		ret new(Data)
	}

	if !real(t.kind.fnc()) {
		e.push_err(fc.args[0].token, "invalid_expr")
		ret new(Data)
	}

	let tkind = t.kind.fnc().to_str()
	if tkind != HANDLER_KIND {
		e.push_err(fc.args[0].token, "incompatible_types", tkind, HANDLER_KIND)
	}

	let mut d = build_void_data()
	d.kind = t.kind.clone()
	d.model = &Recover{
		handler_expr: t.model,
	}
	ret d
}

fn builtin_caller_clone(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}

	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "expr")
		ret new(Data)
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[1].token, "argument_overflow")
	}

	let mut d = e.eval_expr_kind(fc.args[0].kind)
	if !real(d) {
		ret new(Data)
	}

	let check_kind = fn(mut k: &TypeKind) {
		match {
		| real(k.slc()):
			if !supports_clonning(k.slc().elem) {
				e.push_err(fc.args[0].token, "internal_type_not_supports_clone", k.to_str())
			}

		| real(k.map()):
			if !supports_clonning(k.map().key) || supports_clonning(k.map().val) {
				e.push_err(fc.args[0].token, "internal_type_not_supports_clone", k.to_str())
			}

		| real(k.arr()):
			if !supports_clonning(k.arr().elem) {
				e.push_err(fc.args[0].token, "internal_type_not_supports_clone", k.to_str())
			}

		| real(k.ref()):
			if !supports_clonning(k.ref().elem) {
				e.push_err(fc.args[0].token, "internal_type_not_supports_clone", k.to_str())
			}

		| real(k.strct()):
			let s = d.kind.strct()
			if !s.has_mut {
				e.push_err(fc.args[0].token, "clone_immut_struct", d.kind.to_str())
			}
			if !real(s.decl) || s.decl.cpp_linked || !s.decl.is_derives((str)(Derives.Clone)) {
				e.push_err(fc.args[0].token, "type_is_not_derives", d.kind.to_str(), (str)(Derives.Clone))
			}

		|:
			e.push_err(fc.args[0].token, "type_is_not_derives", d.kind.to_str(), (str)(Derives.Clone))
		}
	}

	match {
	| d.mutable:
		e.push_err(fc.token, "clone_with_mut")

	| !d.lvalue:
		e.push_err(fc.args[0].token, "clone_non_lvalue")

	| !supports_clonning(d.kind):
		check_kind(d.kind)
	}

	d.mutable = true
	d.model = &BuiltinCloneCallExprModel{expr: d.model}
	ret d
}

fn builtin_caller_std_mem_size_of(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	let mut result = &Data{
		kind: &TypeKind{kind: build_prim_type((str)(PrimKind.Uint))},
	}

	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "type|expr")
		ret result
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[1].token, "argument_overflow")
	}

	let mut d = e.eval_expr_kind(fc.args[0].kind)
	if !real(d) {
		ret result
	}

	result.model = &SizeofExprModel{expr: d.model}
	ret result
}

fn builtin_caller_std_mem_align_of(mut e: &Eval, mut fc: &FnCallExpr, mut _: &Data): &Data {
	if fc.generics.len > 0 {
		e.push_err(fc.token, "not_has_generics")
	}
	let mut result = &Data{
		kind: &TypeKind{kind: build_prim_type((str)(PrimKind.Uint))},
	}

	if fc.args.len < 1 {
		e.push_err(fc.token, "missing_expr_for", "type|expr")
		ret result
	}
	if fc.args.len > 1 {
		e.push_err(fc.args[1].token, "argument_overflow")
	}

	let mut d = e.eval_expr_kind(fc.args[0].kind)
	if !real(d) {
		ret result
	}

	result.model = &AlignofExprModel{expr: d.model}
	ret result
}

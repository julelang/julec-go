// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// List of all possible std::runtime::OS values:
enum RuntimeOs: str {
	Windows = "windows",
	Darwin = "darwin",
	Linux = "linux"
}

// List of all possible std::runtime::ARCH values:
enum RuntimeArch: str {
	I386 = "i386",
	Amd64 = "amd64",
	Arm = "arm",
	Arm64 = "arm64",
}

// Operating Systems for file annotation kind.
pub enum Os: str {
	Windows = "windows",
	Linux = "linux",
	Darwin = "darwin",
	Unix = "unix",
}

// Architectures for file annotation kind.
pub enum Arch: str {
	I386 = "i386",
	Arm = "arm",
	Arm64 = "arm64",
	Amd64 = "amd64",
	Bit32 = "32bit",
	Bit64 = "64bit",
}

// List of supported operating systems.
pub let DISTOS = [
	Os.Windows,
	Os.Linux,
	Os.Darwin,
]

// List of supported architectures.
pub let DISTARCH = [
	Arch.Arm,
	Arch.Arm64,
	Arch.Amd64,
	Arch.I386,
]

// Reports whether os is windows.
pub fn is_windows(os: str): bool { ret os == (str)(RuntimeOs.Windows) }
// Reports whether os is darwin.
pub fn is_darwin(os: str): bool { ret os == (str)(RuntimeOs.Darwin) }
// Reports whether os is linux.
pub fn is_linux(os: str): bool { ret os == (str)(RuntimeOs.Linux) }
// Reports whether architecture is intel 386.
pub fn is_i386(arch: str): bool { ret arch == (str)(RuntimeArch.I386) }
// Reports whether architecture is amd64.
pub fn is_amd64(arch: str): bool { ret arch == (str)(RuntimeArch.Amd64) }
// Reports whether architecture is arm.
pub fn is_arm(arch: str): bool { ret arch == (str)(RuntimeArch.Arm) }
// Reports whether architecture is arm64.
pub fn is_arm64(arch: str): bool { ret arch == (str)(RuntimeArch.Arm64) }
// Reports whether os is unix.
pub fn is_unix(os: str): bool { ret is_darwin(os) || is_linux(os) }
// Reports whether architecture is 32-bit.
pub fn is_32bit(arch: str): bool { ret is_i386(arch) || is_arm(arch) }
// Reports whether architecture is 64-bit.
pub fn is_64bit(arch: str): bool { ret is_amd64(arch) || is_arm64(arch) }

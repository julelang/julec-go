// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::path::{dir, join}
use std::os::{OsError, exit, getwd, executable}

// Environment Variables.
// Initialized by initializer function.
pub let PATH_STDLIB: str // Path of standard library.
pub let PATH_EXEC: str   // Path of executable file's directory.
pub let PATH_WD: str     // Path of working directory.
pub let PATH_API: str    // Path of main API header file.

fn exit_err(msg: str) {
	const ERROR_EXIT_CODE = 0

	outln(msg)
	exit(ERROR_EXIT_CODE)
}

fn init() {
	let mut path = executable()
	if path == "" {
		exit_err("std::jule::build: executable file cannot found")
	}

	let (pwd, err) = getwd()
	if err != OsError.Ok {
		exit_err("std::jule::build: working directory path cannot found")
	}

	let path_exec = dir(path)

	// Go to parent directory.
	path = join(path_exec, "..")

	// Break immutability for assign paths.
	unsafe {
		*(&PATH_WD) = pwd
		*(&PATH_EXEC) = path_exec
		*(&PATH_STDLIB) = join(path, STDLIB)
		
		*(&PATH_API) = join(PATH_EXEC, "..")
		*(&PATH_API) = join(PATH_API, "api")
		*(&PATH_API) = join(PATH_API, "jule.hpp")
	}
}

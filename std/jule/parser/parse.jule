// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{Ast}
use std::jule::build::{Log}
use std::jule::lex::{File}

// Stores information about file parsing.
pub struct FileInfo {
	pub ast:    &Ast
	pub errors: []Log
}

// Stores information about package parsing.
pub struct PackageInfo {
	pub files: []&FileInfo
}

// Parses fileset's tokens and builds AST.
// Returns nil if f is not real.
pub fn parse_file(mut f: &File): &FileInfo {
	if !real(f) {
		ret new(FileInfo)
	}

	let mut finf = &FileInfo{}
	finf.ast, finf.errors = parse_fileset(f)
	if finf.errors != nil {
		drop(finf.ast)
	}

	ret finf
}

// Parses fileset's tokens and builds AST.
// Returns nil if filesets is nil.
// Skip fileset if nil.
pub fn parse_package(mut filesets: []&File): &PackageInfo {
	if filesets == nil {
		ret new(PackageInfo)
	}

	let mut pinf = &PackageInfo{}
	for (_, mut f) in filesets {
		if !real(f) {
			continue
		}

		let mut finfo = parse_file(f)
		pinf.files = append(pinf.files, finfo)
	}

	ret pinf
}

fn parse_fileset(mut f: &File): (&Ast, []Log) {
	let mut p = &Parser{}
	p.parse(f)
	ret p.ast, p.errors
}

// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Type kinds of primitive types.
// These kinds are must match keyword form itself.
pub enum TypeKind: str {
	I8 = "i8",           // Kind of signed 8-bit integer
	I16 = "i16",         // Kind of signed 16-bit integer
	I32 = "i32",         // Kind of signed 32-bit integer
	I64 = "i64",         // Kind of signed 64-bit integer
	U8 = "u8",           // Kind of unsigned 8-bit integer
	U16 = "u16",         // Kind of unsigned 16-bit integer
	U32 = "u32",         // Kind of unsigned 32-bit integer
	U64 = "u64",         // Kind of unsigned 64-bit integer
	F32 = "f32",         // Kind of 32-bit floating-point
	F64 = "f64",         // Kind of 64-bit floating-point
	Uint = "uint",       // Kind of system specific bit-size unsigned integer
	Int = "int",         // Kind of system specific bit-size signed integer
	Uintptr = "uintptr", // Kind of system specific bit-size unsigned integer
	Bool = "bool",       // Kind of boolean
	Str = "str",         // Kind of string
	Any = "any",         // Kind of any type
}

// Reports whether kind is signed integer.
pub fn is_sig_int(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32) ||
		k == (str)(TypeKind.I64)
	)
}

// Reports kind is unsigned integer.
pub fn is_unsig_int(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.U32) ||
		k == (str)(TypeKind.U64)
	)
}

// Reports whether kind is signed/unsigned integer.
pub fn is_int(k: str): bool {
	ret is_sig_int(k) || is_unsig_int(k)
}

// Reports whether kind is float.
pub fn is_float(k: str): bool {
	ret k == (str)(TypeKind.F32) || k == (str)(TypeKind.F64)
}

// Reports whether kind is numeric.
pub fn is_num(k: str): bool {
	ret is_int(k) || is_float(k)
}

// Reports whether kind is signed numeric.
pub fn is_sig_num(k: str): bool {
	ret is_sig_int(k) || is_float(k)
}

// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Maximum positive value of 32-bit floating-points.
pub const MAX_F32 = 0x1p127 * (1 + (1 - 0x1p-23))
// Maximum negative value of 32-bit floating-points.
pub const MIN_F32 = -0x1p127 * (1 + (1 - 0x1p-23))

// Maximum positive value of 64-bit floating-points.
pub const MAX_F64 = 0x1p1023 * (1 + (1 - 0x1p-52))
// Maximum negative value of 64-bit floating-points.
pub const MIN_F64 = -0x1p1023 * (1 + (1 - 0x1p-52))

// Maximum positive value of 8-bit signed integers.
pub const MAX_I8 = 127
// Maximum negative value of 8-bit signed integers.
pub const MIN_I8 = -128
// Maximum positive value of 16-bit signed integers.
pub const MAX_I16 = 32767
// Maximum negative value of 16-bit signed integers.
pub const MIN_I16 = -32768
// Maximum positive value of 32-bit signed integers.
pub const MAX_I32 = 2147483647
// Maximum negative value of 32-bit signed integers.
pub const MIN_I32 = -2147483648
// Maximum positive value of 64-bit signed integers.
pub const MAX_I64 = 9223372036854775807
// Maximum negative value of 64-bit signed integers.
pub const MIN_I64 = -9223372036854775808

// Maximum value of 8-bit unsigned integers.
pub const MAX_U8 = 255
// Maximum value of 16-bit unsigned integers.
pub const MAX_U16 = 65535
// Maximum value of 32-bit unsigned integers.
pub const MAX_U32 = 4294967295
// Maximum value of 64-bit unsigned integers.
pub const MAX_U64 = 18446744073709551615

// Returns minimum value of signed/unsigned integer and floating-point kinds.
// Returns 0 if kind is invalid.
pub fn min_of(mut k: str): f64 {
	k = real_kind_of(k)
	match k {
	| (str)(TypeKind.I8):  ret MIN_I8
	| (str)(TypeKind.I16): ret MIN_I16
	| (str)(TypeKind.I32): ret MIN_I32
	| (str)(TypeKind.I64): ret MIN_I64
	| (str)(TypeKind.F32): ret MIN_F32
	| (str)(TypeKind.F64): ret MIN_F64
	|:                     ret 0
	}
}

// Returns minimum value of signed/unsigned integer and floating-point kinds.
// Returns 0 if kind is invalid.
pub fn max_of(mut k: str): f64 {
	k = real_kind_of(k)
	match k {
	| (str)(TypeKind.I8):  ret MAX_I8
	| (str)(TypeKind.I16): ret MAX_I16
	| (str)(TypeKind.I32): ret MAX_I32
	| (str)(TypeKind.I64): ret MAX_I64
	| (str)(TypeKind.U8):  ret MAX_U8
	| (str)(TypeKind.U16): ret MAX_U16
	| (str)(TypeKind.U32): ret MAX_U32
	| (str)(TypeKind.U64): ret MAX_U64
	| (str)(TypeKind.F32): ret MAX_F32
	| (str)(TypeKind.F64): ret MAX_F64
	|:                     ret 0
	}
}

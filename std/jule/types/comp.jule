// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Reports whether i8 is compatible with kind.
pub fn is_i8_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret k == (str)(TypeKind.I8)
}

// Reports whether i16 is compatible with kind.
pub fn is_i16_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.U8)
	)
}

// Reports whether i32 is compatible with kind.
pub fn is_i32_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32) ||
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16)
	)
}

// Reports whether i64 is compatible with kind.
pub fn is_i64_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32) ||
		k == (str)(TypeKind.I64) ||
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.U32)
	)
}

// Reports whether u8 is compatible with kind.
pub fn is_u8_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret k == (str)(TypeKind.U8)
}

// Reports whether u16 is compatible with kind.
pub fn is_u16_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret k == (str)(TypeKind.U8) || k == (str)(TypeKind.U16)
}

// Reports whether u32 is compatible with kind.
pub fn is_u32_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.U32)
	)
}

// Reports whether u64 is compatible with kind.
pub fn is_u64_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.U32) ||
		k == (str)(TypeKind.U64)
	)
}

// Reports whether f32 is compatible with kind.
pub fn is_f32_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.F32) ||
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32) ||
		k == (str)(TypeKind.I64) ||
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.U32) ||
		k == (str)(TypeKind.U64)
	)
}

// Reports whether f64 is compatible with kind.
pub fn is_f64_compatible(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.F64) ||
		k == (str)(TypeKind.F32) ||
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32) ||
		k == (str)(TypeKind.I64) ||
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.U32) ||
		k == (str)(TypeKind.U64)
	)
}

// Reports types are compatible.
// k1 is the destination type, k2 is the source type.
// Return false if k2 is unsupported kind.
pub fn types_are_compatible(mut k1: str, k2: str): bool {
	k1 = real_kind_of(k1)
	match k1 {
	| (str)(TypeKind.Any):  ret true
	| (str)(TypeKind.I8):   ret is_i8_compatible(k2)
	| (str)(TypeKind.I16):  ret is_i16_compatible(k2)
	| (str)(TypeKind.I32):  ret is_i32_compatible(k2)
	| (str)(TypeKind.I64):  ret is_i64_compatible(k2)
	| (str)(TypeKind.U8):   ret is_u8_compatible(k2)
	| (str)(TypeKind.U16):  ret is_u16_compatible(k2)
	| (str)(TypeKind.U32):  ret is_u32_compatible(k2)
	| (str)(TypeKind.U64):  ret is_u64_compatible(k2)
	| (str)(TypeKind.F32):  ret is_f32_compatible(k2)
	| (str)(TypeKind.F64):  ret is_f64_compatible(k2)
	| (str)(TypeKind.Bool): ret k2 == (str)(TypeKind.Bool)
	| (str)(TypeKind.Str):  ret k2 == (str)(TypeKind.Str)
	|:                      ret false
	}
}

// Reports whether i16 is greater than given kind.
pub fn is_i16_greater(mut k: str): bool {
	k = real_kind_of(k)
	ret k == (str)(TypeKind.U8)
}

// Reports whether i32 is greater than given kind.
pub fn is_i32_greater(mut k: str): bool {
	k = real_kind_of(k)
	ret k == (str)(TypeKind.I8) || k == (str)(TypeKind.I16)
}

// Reports whether i64 is greater than given kind.
pub fn is_i64_greater(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32)
	)
}

// Reports whether u8 is greater than given kind.
pub fn is_u8_greater(mut k: str): bool {
	k = real_kind_of(k)
	ret k == (str)(TypeKind.I8)
}

// Reports whether u16 is greater than given kind.
pub fn is_u16_greater(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16)
	)
}

// Reports whether u32 is greater than given kind.
pub fn is_u32_greater(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32)
	)
}

// Reports whether u64 is greater than given kind.
pub fn is_u64_greater(mut k: str): bool {
	k = real_kind_of(k)
	ret (
		k == (str)(TypeKind.U8) ||
		k == (str)(TypeKind.U16) ||
		k == (str)(TypeKind.U32) ||
		k == (str)(TypeKind.I8) ||
		k == (str)(TypeKind.I16) ||
		k == (str)(TypeKind.I32) ||
		k == (str)(TypeKind.I64)
	)
}

// Reports whether f32 is greater than given kind.
pub fn is_f32_greater(k: str): bool { ret k != (str)(TypeKind.F64) }
// Reports whether f64 is greater than given kind.
pub fn is_f64_greater(k: str): bool { ret true }

// Reports whether k1 kind greater than k2 kind.
pub fn is_greater(mut k1: str, k2: str): bool {
	k1 = real_kind_of(k1)

	match k1 {
	| (str)(TypeKind.I16): ret is_i16_greater(k2)
	| (str)(TypeKind.I32): ret is_i32_greater(k2)
	| (str)(TypeKind.I64): ret is_i64_greater(k2)
	| (str)(TypeKind.U16): ret is_u16_greater(k2)
	| (str)(TypeKind.U8):  ret is_u8_greater(k2)
	| (str)(TypeKind.U32): ret is_u32_greater(k2)
	| (str)(TypeKind.U64): ret is_u64_greater(k2)
	| (str)(TypeKind.F32): ret is_f32_greater(k2)
	| (str)(TypeKind.F64): ret is_f64_greater(k2)
	| (str)(TypeKind.Any): ret true
	|:                     ret false
	}
}

// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::unicode::utf16::{append_rune, decode}

use cpp "<dirent.h>"

cpp type wchar_t: u16

//jule:typedef
cpp struct _WDIR{}

cpp struct _wdirent {
	pub d_name: *cpp.wchar_t
}

cpp fn GetStdHandle(stdh: uintptr): *unsafe
cpp unsafe fn CloseHandle(stdh: *unsafe): bool
cpp unsafe fn wstat(path: *cpp.wchar_t, mut handle: *cpp.stat): int
cpp unsafe fn _wopendir(path: *cpp.wchar_t): *cpp._WDIR
cpp unsafe fn _wclosedir(mut dir: *cpp._WDIR): int
cpp unsafe fn _wreaddir(mut dir: *cpp._WDIR): *cpp._wdirent
cpp unsafe fn _wopen(path: *cpp.wchar_t, flag: int, mode: int): int
cpp fn GetLastError(): u32
cpp unsafe fn GetCurrentDirectoryW(bufflen: u32, buff: *cpp.wchar_t): u32
cpp unsafe fn SetCurrentDirectoryW(path: *cpp.wchar_t): bool
cpp unsafe fn GetFullPathNameW(path: *cpp.wchar_t, bufflen: u32, buff: *cpp.wchar_t, fname: **cpp.wchar_t): u32

// C's _WDIR.
pub type Wdir: cpp._WDIR

// C's _wdirent.
pub type Wdirent: cpp._wdirent

pub type handle: uintptr

pub const INVALID_HANDLE = ^handle(0)

pub let STDIN  = get_std_handle(uintptr(STD_INPUT_HANDLE))
pub let STDOUT = get_std_handle(uintptr(STD_OUTPUT_HANDLE))
pub let STDERR = get_std_handle(uintptr(STD_ERROR_HANDLE))

// Returns the UTF-16 encoding of the UTF-8 string
// s, with a terminating NULL added. If s includes NULL
// character at any location, ignores followed characters.
pub fn utf16_from_str(s: str): []u16 {
	// In the worst case all characters require two u16.
	// Also account for the terminating NULL character.
	// See: C Strings and Windows UTF16.

	const NULL_TERMINATION = '\x00'
	let mut buf: []u16 = nil
	let runes = ([]rune)(s)
	for _, r in runes {
		if r == NULL_TERMINATION {
			break
		}
		buf = append_rune(buf, r)
	}
	ret append_rune(buf, NULL_TERMINATION)
}

// Returns the UTF-8 encoding of the UTF-16 sequence s,
// with a terminating NULL removed. Returns empty string
// if s is nil.
pub fn utf16_to_str(s: []u16): str {
	if s == nil {
		ret ""
	}
	let mut code_page = unsafe { *(&s) }
	for i, v in s {
		if v == 0 {
			code_page = code_page[0:i]
			break
		}
	}
	ret (str)(decode(code_page))
}

// Returns the UTF-8 encoding of the UTF-16 sequence s in *u16 form,
// with a terminating NULL removed. Returns empty string if s is nil.
pub unsafe fn u16_ptr_to_str(s: *u16): str {
	if s == nil {
		ret ""
	}

	let mut code_page: []u16 = nil
	let mut i = 0
	for ; i++ {
		let r = (u16)(s[i])
		code_page = append(code_page, r)
		if r == 0 {
			ret (str)(decode(code_page))
		}
	}
	ret ""
}

pub fn get_std_handle(stdh: uintptr): handle { ret handle(cpp.GetStdHandle(stdh)) }
pub unsafe fn close_handle(stdh: handle): bool { ret cpp.CloseHandle(unsafe { (*unsafe)(stdh) }) }

// Calls C's wstat function.
pub unsafe fn wstat(path: *u16, mut stat: *Stat): int {
	ret cpp.wstat((*cpp.wchar_t)(path), stat)
}

// Wrapper for C's _wopen function.
pub unsafe fn _wopen(path: *u16, flag: int, mode: int): int {
	ret cpp._wopen((*cpp.wchar_t)(&path[0]), flag, mode)
}

// Returns last Windows error.
pub fn get_last_error(): u32 { ret cpp.GetLastError() }

// Reads working directory into buff and returns readed
// rune count of current process. Returns 0 if fail.
pub unsafe fn get_current_directory(bufflen: u32, mut buff: *u16): u32 {
	ret cpp.GetCurrentDirectoryW(bufflen, (*cpp.wchar_t)(buff))
}

// Sets working directory to path.
// Reports operation is success.
pub unsafe fn set_current_directory(path: *u16): bool {
	ret cpp.SetCurrentDirectoryW((*cpp.wchar_t)(path))
}

// Calls C's _wopendir function.
pub unsafe fn _wopendir(path: *u16): *Wdir { ret cpp._wopendir((*cpp.wchar_t)(path)) }

// Calls C's _wreaddir function.
pub unsafe fn _wreaddir(mut dir: *Wdir): *Wdirent { ret cpp._wreaddir(dir) }

// Calls C's _wclosedir function.
pub unsafe fn _wclosedir(mut dir: *Wdir): int { ret cpp._wclosedir(dir) }

// Calls Windows's GetFullPathNameW function.
pub unsafe fn get_full_path_name(path: *u16, bufflen: u32, buff: *u16, fname: **u16): u32 {
	ret cpp.GetFullPathNameW((*cpp.wchar_t)(path),
								bufflen,
								(*cpp.wchar_t)(buff),
								(**cpp.wchar_t)(fname))
}

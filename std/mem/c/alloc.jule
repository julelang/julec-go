// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// This file include unsafe functions for c-style memory management.

cpp fn malloc(size: uint): *unsafe
cpp fn calloc(size: uint, n: uint): *unsafe
cpp unsafe fn realloc(mut ptr: *unsafe, size: uint): *unsafe
cpp unsafe fn free(mut ptr: *unsafe)

// Allocates size bytes of memory.
// Memory does not initialize.
// Returns pointer to allocation if success, nil if not.
pub fn malloc(size: uint): *unsafe { ret cpp.malloc(size) }

// Allocates n elements of size bytes each, all initialized to zero.
// Returns pointer to allocation if success, nil if not.
pub fn calloc(size: uint, n: uint): *unsafe { ret cpp.calloc(size, n) }

// Re-allocates the previously allocated block in ptr,
// making the new block size bytes long.
// Returns pointer to allocation if success, nil if not.
pub unsafe fn realloc(mut ptr: *unsafe, size: uint): *unsafe { ret cpp.realloc(ptr, size) }

// Free a block allocated by malloc, realloc or calloc.
// ptr is not setted as nil by function, therefore ptr is dangling after free.
// Set ptr as nil after free for more safety.
pub unsafe fn free(mut ptr: *unsafe) { cpp.free(ptr) }

// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

//jule:cdef
cpp unsafe fn __jule_atomic_swap[T](mut addr: *T, new: T): (old: T)

//jule:cdef
cpp unsafe fn __jule_atomic_compare_swap[T](mut addr: *T,
											old: *T, new: T): (swapped: bool)

//jule:cdef
cpp unsafe fn __jule_atomic_add[T](mut addr: *T, delta: T): (old: T)

//jule:cdef
cpp unsafe fn __jule_atomic_load[T](addr: *T): T

//jule:cdef
cpp unsafe fn __jule_atomic_store[T](mut addr: *T, val: T)

// Atomically stores new into *addr and returns the previous *addr value.
pub unsafe fn swap_i32(mut addr: *i32, new: i32): (old: i32) {
	ret cpp.__jule_atomic_swap[i32](addr, new)
}

// Atomically stores new into *addr and returns the previous *addr value.
pub unsafe fn swap_i64(mut addr: *i64, new: i64): (old: i64) {
	ret cpp.__jule_atomic_swap[i64](addr, new)
}

// Atomically stores new into *addr and returns the previous *addr value.
pub unsafe fn swap_u32(mut addr: *u32, new: u32): (old: u32) {
	ret cpp.__jule_atomic_swap[u32](addr, new)
}

// Atomically stores new into *addr and returns the previous *addr value.
pub unsafe fn swap_u64(mut addr: *u64, new: u64): (old: u64) {
	ret cpp.__jule_atomic_swap[u64](addr, new)
}

// Atomically stores new into *addr and returns the previous *addr value.
pub unsafe fn swap_uinptr(mut addr: *uintptr, new: uintptr): (old: uintptr) {
	ret cpp.__jule_atomic_swap[uintptr](addr, new)
}

// Executes the compare-and-swap operation for an i32 value.
pub unsafe fn compare_swap_i32(mut addr: *i32, old: i32, new: i32): (swapped: bool) {
	ret cpp.__jule_atomic_compare_swap[i32](addr, &old, new)
}

// Executes the compare-and-swap operation for an i64 value.
pub unsafe fn compare_swap_i64(mut addr: *i64, old: i64, new: i64): (swapped: bool) {
	ret cpp.__jule_atomic_compare_swap[i64](addr, &old, new)
}

// Executes the compare-and-swap operation for an u32 value.
pub unsafe fn compare_swap_u32(mut addr: *u32, old: u32, new: u32): (swapped: bool) {
	ret cpp.__jule_atomic_compare_swap[u32](addr, &old, new)
}

// Executes the compare-and-swap operation for an u64 value.
pub unsafe fn compare_swap_u64(mut addr: *u64, old: u64, new: u64): (swapped: bool) {
	ret cpp.__jule_atomic_compare_swap[u64](addr, &old, new)
}

// Executes the compare-and-swap operation for an uintptr value.
pub unsafe fn compare_swap_uintptr(mut addr: *uintptr,
								old: uintptr, new: uintptr): (swapped: bool) {
	ret cpp.__jule_atomic_compare_swap[uintptr](addr, &old, new)
}

// Atomically adds delta to *addr and returns the previous *addr value.
pub unsafe fn add_i32(mut addr: *i32, delta: i32): (old: i32) {
	ret cpp.__jule_atomic_add[i32](addr, delta)
}

// Atomically adds delta to *addr and returns the previous *addr value.
pub unsafe fn add_i64(mut addr: *i64, delta: i64): (old: i64) {
	ret cpp.__jule_atomic_add[i64](addr, delta)
}

// Atomically adds delta to *addr and returns the previous *addr value.
pub unsafe fn add_u32(mut addr: *u32, delta: u32): (old: u32) {
	ret cpp.__jule_atomic_add[u32](addr, delta)
}

// Atomically adds delta to *addr and returns the previous *addr value.
pub unsafe fn add_u64(mut addr: *u64, delta: u64): (old: u64) {
	ret cpp.__jule_atomic_add[u64](addr, delta)
}

// Atomically adds delta to *addr and returns the previous *addr value.
pub unsafe fn add_uinptr(mut addr: *uintptr, delta: uintptr): (old: uintptr) {
	ret cpp.__jule_atomic_add[uintptr](addr, delta)
}

// Atomically loads *addr.
pub unsafe fn load_i32(addr: *i32): i32 {
	ret cpp.__jule_atomic_load[i32](addr)
}

// Atomically loads *addr.
pub unsafe fn load_i64(addr: *i64): i64 {
	ret cpp.__jule_atomic_load[i64](addr)
}

// Atomically loads *addr.
pub unsafe fn load_u32(addr: *u32): u32 {
	ret cpp.__jule_atomic_load[u32](addr)
}

// Atomically loads *addr.
pub unsafe fn load_u64(addr: *u64): u64 {
	ret cpp.__jule_atomic_load[u64](addr)
}

// Atomically loads *addr.
pub unsafe fn load_uinptr(addr: *uintptr): uintptr {
	ret cpp.__jule_atomic_load[uintptr](addr)
}

// Atomically stores val into *addr.
pub unsafe fn store_i32(mut addr: *i32, val: i32) {
	cpp.__jule_atomic_store[i32](addr, val)
}

// Atomically stores val into *addr.
pub unsafe fn store_i64(mut addr: *i64, val: i64) {
	cpp.__jule_atomic_store[i64](addr, val)
}

// Atomically stores val into *addr.
pub unsafe fn store_u32(mut addr: *u32, val: u32) {
	cpp.__jule_atomic_store[u32](addr, val)
}

// Atomically stores val into *addr.
pub unsafe fn store_u64(mut addr: *u64, val: u64) {
	cpp.__jule_atomic_store[u64](addr, val)
}

// Atomically stores val into *addr.
pub unsafe fn store_uinptr(mut addr: *uintptr, val: uintptr) {
	cpp.__jule_atomic_store[uintptr](addr, val)
}

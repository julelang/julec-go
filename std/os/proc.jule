// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys

use cpp "proc.hpp"

cpp fn __jule_get_command_line_args(): []str
cpp fn __jule_executable(): str

// Holds the command-line arguments.
// Starts with the program name.
//
// Special bytes trimmed if program name have
// any special byte at begin or end.
// Special bytes are: " ' < >
//
// Command-line arguments sets at runtime with init function.
// Initialize expression is nil.
// You got nil slice if used as initialize expression to any global.
pub let ARGS: []str = nil

// Returns an absolute path name of the current working
// directory of the calling process.
//
// Possible errors:
//  Denied
pub fn getwd(): (str, OsError) { ret __getwd() }

// Changes the current working directory to the given directory.
//
// Possible errors:
//  Denied IO Loop LongPath NotExist NotDir InsufficientMemory
//  Divice
pub fn chdir(path: str): OsError {
	if path == "" {
		ret OsError.NotDir
	}
	ret __chdir(path)
}

// Causes the current program to exit with the given status code.
// Conventionally, code zero indicates success, non-zero an error.
pub fn exit(code: int) { std::sys::exit(code) }

// Returns executable path.
// Returns empty string if any error occurs.
pub fn executable(): str { ret cpp.__jule_executable() }

fn init() {
	unsafe {
		// Break immutability for set parsed command-line arguments
		let mut mut_args = &ARGS
		*mut_args = cpp.__jule_get_command_line_args()
	}
}
